<<SetParentPart1, echo=FALSE>>=
set_parent('../Parent/RPM-Parent.Rnw')
@

\begin{frame}{Part 1 - Introducing R}
  \begin{itemize}
    \item Installation \& history
    \item Why doesn't it work?
    \item Installing packages
    \item Reading data
    \item A basic script
  \end{itemize}
\end{frame}

\begin{frame}{What the heck is R?}
%While some folks are getting software sorted out, we'll have a brief review of the history of R. 
%Let's get this done quick. If you don't have R and R Studio installed, today will be a long day.
  R is a programming framework designed by and for statisticians. R is ... 
  \begin{itemize}
    \item Free %It costs nothing to use.
    \item Open source %The source code is available to the public to view and modify (within restrictions).
    \item Extendable %Anyone may write extensions to the software. At present there are 4,000 user contributed packages and counting.
    \item Advanced statistical techniques are available out of the box. 
    \item Machine learning algorithms- cluster analysis, neural networks, etc.%Any time someone invents a new way to analyze data, it is quickly available in R.
    \item Visualize network graphs, construct word clouds, render maps. %Visualization is tremendous. Bar charts and scatter plots are the tip of the iceberg. R can do it all and keeps getting better.
    \item Really, really cool 
  \end{itemize}
\end{frame}

\begin{frame}{A brief history of R}
\includegraphics[width=0.27\textwidth]{../Part1/figure/R}
\newline
In the alphabet, R comes before S. In software, S comes before R.
\newline
\newline
S was developed at Bell Labs by Paul Chambers and some others back in the late '70s. Sweeping changes by 1988.
R was created by Ross Ihaka and Robert Gentleman as an open source alternative to S. First release in 1993.
\end{frame}

\begin{frame}{Nearly 40 years of development}
  \begin{figure}%
      \centering
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/NewSlanguage} }}%
      \qquad
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/StatisticalModelsinS} }}%
      \qquad
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/Soda} }}
      \label{fig:example}%
  \end{figure}
\end{frame}

\begin{frame}{R package growth}
  \includegraphics[height=0.75\textheight]{../Part1/figure/rPackages}
\end{frame}

\begin{frame}
Several packages developed for actuarial use:
  \begin{itemize}
    \item actuar
    \item ChainLadder
    \item lossDev
    \item favir
    \item MRMR
  \end{itemize}
\end{frame}

\begin{frame}{Books about R for actuaries!}
  \begin{figure}%
      \centering
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/ComputationalActuarialScience} }}%
      \qquad
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/PredictiveModeling} }}%
      \qquad
      \subfloat{{\includegraphics[width=0.27\textwidth]{../Part1/figure/RegressionModeling} }}
      \label{fig:example}%
  \end{figure}
\end{frame}

\begin{frame}{What's RStudio?}
RStudio is an Integrated Development Environment (IDE). It's not necessary, but provides quite a few nice features:
  \begin{itemize}
    \item Edit multiple scripts at a time, syntax coloring
    \item Manage projects, version control
    \item View variables in memory, debug code
    \item Support for package development
    \item Reproducible research
  \end{itemize}
\end{frame}

\begin{frame}
Does R and RStudio work for everyone?
\end{frame}

\begin{frame}[fragile]{Basics}
  \begin{itemize}
    \item Basic command entry
    \item How to get help
    \item Working directory
    \item Console vs. script
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
<<eval=TRUE, echo=TRUE, size='tiny'>>=
1 + 1
r = 4
2*pi*r^2
@
<<eval=TRUE, echo=FALSE, size='tiny'>>=
cat("?plot")

cat("??cluster")
@
<<eval=TRUE, echo=TRUE, size='tiny'>>=
getwd()
@
<<eval=FALSE, results='hide', size='tiny'>>=
setwd("~/SomeNewDirectory/SomeSubfolder")

# Save your script

source("SomefileName.R")
@
\end{frame}

\begin{frame}
%Pause
\begin{itemize}
  \item Can everyone type in basic commands?
  \item Can everyone create, open, save and source a script?
  \item Has everyone set their working directory to the location of the data files we'll use?
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Reading data}
<<eval=FALSE>>=
myData = read.csv("SomeFile.csv")
@
\end{frame}

\begin{frame}[fragile]{Reading from Excel}
<<eval=FALSE>>=
library(XLConnect)
wbk = loadWorkbook("myWorkbook.xlsx")
df = readWorksheet(wbk, someSheet)
@
\end{frame}

\begin{frame}[fragile]{Reading from the web - 1}
<<eval=FALSE, size='tiny'>>=
URL = "http://www.casact.org/research/reserve_data/ppauto_pos.csv"
df = read.csv(URL, stringsAsFactors = FALSE)
@
\end{frame}

\begin{frame}[fragile]{Reading from the web - 2}
<<eval=FALSE, size='tiny'>>=
require(XML)
URL = "http://www.pro-football-reference.com/teams/nyj/2012_games.htm"
games = readHTMLTable(URL, stringsAsFactors = FALSE)
@
\end{frame}

\begin{frame}[fragile]{Reading from a database}
<<eval=FALSE>>=
library(RODBC)
myChannel = odbcConnect(dsn = "MyDSN_Name")
df = sqlQuery(myChannel, "SELECT stuff FROM myTable")
@
\end{frame}

\begin{frame}[fragile]{Data frames}
Every time we read in data, we're creating a data frame. The data frame is a seminal concept in R. Most statistical operations expect one and they are the most common way to pass data in and out of R.

Although critical to understand, this is very, very easy to get. What's a data frame? It's a table. That's it.
<<eval=FALSE>>=
df = read.csv("SomeFile.csv")
View(df)
@
\end{frame}

\begin{frame}[fragile]{A simple script}
<<eval=TRUE>>=
N = 100
B0 = 5
B1 = 1.5

set.seed(1234)

e = rnorm(N, mean = 0, sd = 1)
X1 = rep(seq(1,10),10)

Y = B0 + B1 * X1 + e

df = data.frame(Y, X1, e)
myFit = lm(Y ~ X1, data=df)
@
\end{frame}

\begin{frame}[fragile]{So what have we done?}
<<eval=FALSE>>=
N = 100

B0 = 5

B1 = 1.5
@
Assign a number to a variable (i.e. enter a value into a single cell in a spreadsheet).
\end{frame}

\begin{frame}[fragile]
<<eval = FALSE>>=
set.seed(1234)
@
Set the seed for random number generation.
\end{frame}

\begin{frame}[fragile]
<<eval=FALSE>>=
e = rnorm(N, mean = 0, sd = 1)
X1 = rep(seq(1,10),10)
@

Every variable is a vector. Think of a set of cells in a spreadsheet. Here, e is a vector with N values. X1 is the sequence of integers from 1 through 10 repeated 10 times. Vectors can grow and shrink automatically. No need to move cells around on a sheet. No need to copy formulas or change named ranges.
\end{frame}

\begin{frame}[fragile]
Vectorization is one of the most important concepts in R!

Similar to Matlab/Octave, operations on a table in a database.
<<eval=FALSE>>=
Y = B0 + B1 * X1 + e
@
Vectors may be used in arithmetic operations. Y is now a vector with length equal to the longest vector used in the calculation.

Question: B0 and B1 are vectors of length 1. X1 and e are vectors of length 100. How are they combined?
\end{frame}

\begin{frame}[fragile]{Recycling}
R will "recycle" vectors until there are enough rows to perform an operation, i.e. everything gets as "long" as the longest vector in the operation. For scalar operations on a vector this doesn't involve any drama. Try the following code:
<<size='tiny'>>=
vector1 = 1:10
vector2 = 1:5
scalar = 3

print(vector1 + scalar)
print(vector2 + scalar)
print(vector1 + vector2)
@
\end{frame}

\begin{frame}[fragile]{Fit a linear model}
<<eval=FALSE>>=
myFit = lm(Y ~ X1)
@
We've just created a linear model where Y depends on X1. We don't need to specify the length of the response or the design matrix. Later, we'll see how R will automatically create a complicated design matrix automatically.
\end{frame}

\begin{frame}[fragile]
<<SummaryFirstFit, size='tiny'>>=
summary(myFit)
@
\end{frame}

\begin{frame}{Installing packages}
Several ways: 
\begin{enumerate}
  \item From a CRAN mirror
  \item Locally
  \item Copy someone else's library directory
  \item From GitHub
\end{enumerate}
The library path may be anywhere! If you have a local document repository
this is a great place to store packages without irritating your IT dept.
\end{frame}

\begin{frame}[fragile]
<<eval=FALSE>>=
.libPaths()
packageDir = .libPaths()[1]
list.files(packageDir)

install.packages("ggplot2")

remove.packages("IdontWantThisAnymore")

# Load an installed package into memory
library(MRMR)

# Will load the package and return TRUE/FALSE 

# if the package could be loaded
require(MRMR)
@
\end{frame}

\begin{frame}
%Pause
Can everyone install a package?
\end{frame}
