<<SetParentPart2B, echo=FALSE>>=
set_parent('../Parent/RPM-Parent.Rnw')
@

\begin{frame}[fragile]{Writing your own functions}
<<>>=
myFunction = function(x, y){
  x + y
}
@
\end{frame}

\begin{frame}[fragile]{A real function}
<<>>=
QuadRoot = function(a, b, c){
  disc = b^2 - 4 * a * c
  result = -2 * b - sqrt(disc)
  result = result / (2 * a)
  result
}
@
\end{frame}

\begin{frame}
Functions are basically the same as functions entered into a cell in a spreadsheet. Functions may call other functions and so on.
\end{frame}

\begin{frame}[fragile]{Flow control - if}
<<eval=FALSE>>=
if (something) {
  
} else {
  
}
@
\end{frame}

\begin{frame}[fragile]{Flow control - for}
<<size='tiny', eval=FALSE>>=
for (i in 1:5) {
  
}
@
\end{frame}

\begin{frame}[fragile]{Flow control - while}
<<size='tiny', eval=FALSE>>=
while (something) {
  
}
@
\end{frame}

\begin{frame}[fragile]{Yet again with the simple script}
<<eval=TRUE>>=
N = 100
B0 = 5
B1 = 1.5

set.seed(1234)

e = rnorm(N, mean = 0, sd = 1)
X1 = rep(seq(1,10),10)

Y = B0 + B1 * X1 + e

df = data.frame(Y, X1, e)
myFit = lm(Y ~ X1, data=df)

yHat = predict(myFit)
@
\end{frame}

\begin{frame}[fragile]{A bit more on linear models}
The fit object contains all manner of diagnostics about the quality of the model.
<<size='tiny'>>=
summary(myFit)
@
\end{frame}

\begin{frame}[fragile]
<<size='tiny'>>=
names(myFit)
coefficients(myFit)
@
\end{frame}

\begin{frame}[fragile]{Residuals}
<<size='tiny', fig.height=5>>=
plot(residuals(myFit), pch=19)
@
\end{frame}

\begin{frame}[fragile]{Summary statistics}
<<size='tiny'>>=
mySummary = summary(myFit)
mySummary$r.squared
mySummary$adj.r.squared
mySummary$fstatistic
mySummary$sigma
mySummary$df
@
\end{frame}